# Kubernetes works by creating a virtual network across the entire cluster (spans across all nodes).
# Means that each node has its own unique IP and can communicate across all nodes even if they are on different networks.

# Flannel was used earlier to make the virtual network and allows communication between each node - however there are many other providers that could have been used.

# Create a deployment with two nginx webserver pods:
cat << EOF | kubectl create -f -
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx
  labels:
    app: nginx
spec:
  replicas: 2
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx:1.15.4
        ports:
        - containerPort: 80
EOF

# Check to see they are created:
kubectl get pods
#should get back:
NAME                   READY   STATUS    RESTARTS   AGE
nginx-d55b94fd-9g22b   1/1     Running   0          10s
nginx-d55b94fd-kgtpn   1/1     Running   0          10s


# Create a busybox pod to use for testing - runs an image called busybox and runs curl so we can run curl commands:
cat << EOF | kubectl create -f -
apiVersion: v1
kind: Pod
metadata:
  name: busybox
spec:
  containers:
  - name: busybox
    image: radial/busyboxplus:curl
    args:
    - sleep
    - "1000"
EOF

#Check the pods again:
kubectl get pods
NAME                   READY   STATUS    RESTARTS   AGE
busybox                1/1     Running   0          9s
nginx-d55b94fd-9g22b   1/1     Running   0          2m31s
nginx-d55b94fd-kgtpn   1/1     Running   0          2m31s

# Test our network by testing busybox pod to access the nginx pods

# Get the IP addresses of your pods (add -o command for further information):
# This also gives the node that image runs on.
kubectl get pods -o wide

#output:
kubectl get pods -o wide
NAME                   READY   STATUS    RESTARTS   AGE     IP           NODE      NOMINATED NODE
busybox                1/1     Running   0          96s     10.244.1.5   server2   <none>
nginx-d55b94fd-9g22b   1/1     Running   0          3m58s   10.244.2.7   server3   <none>
nginx-d55b94fd-kgtpn   1/1     Running   0          3m58s   10.244.1.4   server3   <none>

# Get the IP address of one of the nginx pods, then contact that nginx pod from the busybox pod using the nginx pod's IP address:
kubectl exec busybox -- curl $nginx_pod_ip

# e.g from busybox to nginx output - this works since we execute curl (exec) from busybox and check to see if we get back the nginx webpage from 10.244.2.7:
# Note that your getting info from a completly different node from where the busybox is located (see output from above for different nodes hosting pods) - thus networking 
# across the kubernetes cluster works.
kubectl exec busybox -- curl 10.244.2.7
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0<!DOCTYPE html>
<html>
<head>
<title>Welcome to nginx!</title>
<style>
    body {
        width: 35em;
        margin: 0 auto;
        font-family: Tahoma, Verdana, Arial, sans-serif;
    }
</style>
</head>
<body>
<h1>Welcome to nginx!</h1>
<p>If you see this page, the nginx web server is successfully installed and
working. Further configuration is required.</p>

<p>For online documentation and support please refer to
<a href="http://nginx.org/">nginx.org</a>.<br/>
Commercial support is available at
<a href="http://nginx.com/">nginx.com</a>.</p>

<p><em>Thank you for using nginx.</em></p>
</body>
</html>
100   612  100   612    0     0   223k      0 --:--:-- --:--:-- --:--:--  298k
