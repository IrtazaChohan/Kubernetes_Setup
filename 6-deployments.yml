# Deployments are an important tool if you want to take full advantage of the automation capabilities provided by Kubernetes.

# Deployments are a type of object in Kubernetes that give you a little more power to organize and maintain your pods
# A deployment essentially allows you to specify a desired state, it lets you tell the cluster what you want something
# to look like, and the cluster constantly works in order to maintain that desired state

# More features of deployments are:

# Scaling - You can specify the number of replicas that you want for a particular application, and the deployment will 
# create or remove pods in order to meet that number of replicas. So deployments make it really easy to scale up and scale down
# You just tell the deployment how many replicas you want, and it will not only make sure that you have the right number of replicas.
# It will also make sure that they are evenly spread out across your multiple nodes for high availability.

# Rolling updates - With a deployment you can change the deployment container image to a new version of the image. The deployment will 
#  gradually replace and remove the old pods in an incremental fashion so that you can roll out your new code gradually without incurring any downtime.

# Self-healing - if one of your pods in the deployment is accidentlly destroyed, the deployment will immeidatly spin up a new one to replace it.
# It makes sure that you meet the desired state of how many replicas you require even if one is deleted or destroyed.


# Create a deployment - This is an nginx-deployment, and there is a specification for the deployment, and we are specifying two replicas. 
# So we're going to have two nginx pods, and then have a template and the template spec where I specified the containers that are part of this deployment.
cat <<EOF | kubectl create -f -
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
  labels:
    app: nginx
spec:
  replicas: 2
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx:1.15.4
        ports:
        - containerPort: 80
EOF

# Get a list of deployments:
kubectl get deployments

# Get more information about a deployment:
kubectl describe deployment nginx-deployment

# Get a list of pods:
kubectl get pods
You should see two pods created by the deployment.