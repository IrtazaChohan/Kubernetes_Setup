# Although Kubernetes supports loads of plugins that implements Kubernetes networking in various setups we will use Flannel for this task though. We will be installing this on our cluster.

# We need to setup a sysctl value on all servers; On all three nodes, run the following - we are basically echoing out what we want (iptables) into sysctl.conf so it is persistant and survives reboots:
echo "net.bridge.bridge-nf-call-iptables=1" | sudo tee -a /etc/sysctl.conf

#To ensure the above command execuates immediatly then run the below - make sure you run above and below on all worker nodes.
sudo sysctl -p

#Install Flannel in the cluster by running this only on the Master node:
# This will apply (using kubectl apply) the yml file that is located in the below url (provided by coreos that support flannel)
kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/bc79dd1505b0c8681ece4de4c0d86c5cd2643275/Documentation/kube-flannel.yml

#Verify that all the nodes now have a STATUS of Ready:
kubectl get nodes

#You should see all three of your servers listed, and all should have a STATUS of Ready. It should look something like this (might take a bit of time to get into Ready state):
NAME      STATUS     ROLES    AGE     VERSION
server1   Ready      master   5m17s   v1.12.2
server2   Ready      <none>   53s     v1.12.2
server3   Ready      <none>   31s     v1.12.2

#Now verify that Flannel pods are up and running. Run this command to get a list of system pods (should list three pods and all in running state):
# Look for three that state something like "kube-flannel-ds-amd64-vqm8f" etc
kubectl get pods -n kube-system

# You now have a full kubernetes cluster 